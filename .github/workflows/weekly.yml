name: Weekly Maintenance

on:
  schedule:
    - cron: '0 6 * * 1'  # Run at 6 AM UTC every Monday
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-deps-

    - name: Install cargo tools (cached)
      run: |
        if ! command -v cargo-outdated &> /dev/null; then
          cargo install cargo-outdated
        fi
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit
        fi

    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Status Report" > dependency-report.md
        echo "" >> dependency-report.md
        echo "### Outdated Dependencies" >> dependency-report.md
        cargo outdated --format json > outdated.json || true
        if [ -s outdated.json ]; then
          echo "Found outdated dependencies:" >> dependency-report.md
          cargo outdated >> dependency-report.md
        else
          echo "All dependencies are up to date!" >> dependency-report.md
        fi
        echo "" >> dependency-report.md

    - name: Run security audit
      run: |
        echo "### Security Audit" >> dependency-report.md
        cargo audit --format json > audit.json || true
        if [ -s audit.json ]; then
          echo "Security issues found:" >> dependency-report.md
          cargo audit >> dependency-report.md
        else
          echo "No security vulnerabilities found!" >> dependency-report.md
        fi

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          dependency-report.md
          outdated.json
          audit.json

    - name: Create issue for outdated dependencies
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let body = '## Weekly Dependency Check\n\n';
          
          try {
            const report = fs.readFileSync('dependency-report.md', 'utf8');
            body += report;
          } catch (error) {
            body += 'Failed to read dependency report.';
          }
          
          body += '\n\n---\n*This issue was automatically created by the weekly maintenance workflow.*';
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly Dependency Check - ${new Date().toISOString().split('T')[0]}`,
            body: body,
            labels: ['dependencies', 'maintenance']
          });

  full-test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-weekly-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-weekly-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc

    - name: Install cargo tools (cached)
      run: |
        if ! command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
        fi

    - name: Run full development cycle
      run: make full

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: weekly-coverage
        path: coverage/

    - name: Check coverage threshold
      run: |
        if [ -f coverage/tarpaulin-report.json ]; then
          COVERAGE=$(jq -r '.files | map(.coverage) | add / length' coverage/tarpaulin-report.json)
          echo "Current coverage: ${COVERAGE}%"
          
          # Set minimum coverage threshold (adjust as needed)
          THRESHOLD=80
          
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "::warning::Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            exit 1
          fi
        fi